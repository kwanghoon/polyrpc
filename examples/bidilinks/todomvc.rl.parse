thunk : forall a. (Unit -server-> a) -server-> a = \{server} f. f ();
data List a = Nil | Cons a (List a);
mapWithCount : {$l}.
  forall a.
    forall b. Int -$l-> (a -$l-> Int -$l-> b) -$l-> List a -$l-> List b = {$l}.
  \{$l} idx.
    \{$l} f.
      \{$l} xs.
        case xs of
          Nil -> Nil; Cons y ys -> Cons (f y idx) (mapWithCount (idx + 1) f ys);
mapOnIndex : {$l}.
  forall a. Int -$l-> (a -$l-> a) -$l-> List a -$l-> List a = {$l}.
  \{$l} targetIdx.
    \{$l} f.
      \{$l} xs.
        mapWithCount
          0
          ({$l}.
            \{$l} av.
              \{$l} idx.
                case (targetIdx - idx) >= 0 of
                  True ->
                    case (targetIdx - idx) <= 0 of True -> f av; False -> av;
                  False -> av)
          xs;
count : {$l}. forall a. List a -$l-> Int = {$l}.
  \{$l} xs. case xs of Nil -> 0; Cons y ys -> 1 + (count ys);
filter : {$l}. forall a. (a -$l-> Bool) -$l-> List a -$l-> List a = {$l}.
  \{$l} pred.
    \{$l} xs.
      case xs of
        Nil -> Nil;
        Cons y ys ->
          case pred y of
            True -> Cons y (filter pred ys); False -> filter pred ys;
delete : {$l}. forall a. Int -$l-> List a -$l-> List a = {$l}.
  \{$l} idx.
    \{$l} xs.
      case xs of
        Nil -> Nil;
        Cons y ys ->
          case idx < 1 of True -> ys; False -> Cons y (delete (idx - 1) ys);
map : {$l}. forall a. forall b. (a -$l-> b) -$l-> List a -$l-> List b = {$l}.
  \{$l} f. \{$l} xs. mapWithCount 0 ({$l}. \{$l} av. \{$l} idx. f av) xs;
cs : forall a. a -client-> List a -client-> List a = \{client} w.
  \{client} lst. Cons w lst;
data Html a = Element String (List (Attr a)) (List (Html a)) | Txt String;
data Attr a =
  Property String String | Attribute String String | EventBind String
  a | KeyBind Int a | ValueBind String (String -client-> a);
onClick : forall a. a -client-> Attr a = \{client} msg. EventBind "click" msg;
onDblClick : forall a. a -client-> Attr a = \{client} msg.
  EventBind "dblclick" msg;
onBlur : forall a. a -client-> Attr a = \{client} msg. EventBind "blur" msg;
onEnter : forall a. a -client-> Attr a = \{client} msg. KeyBind 13 msg;
onInput : forall a. (String -client-> a) -client-> Attr a = \{client} msgF.
  ValueBind "input" msgF;
nlH : List (Html Msg) = Nil;
nlA : List (Attr Msg) = Nil;
csH : Html Msg -client-> List (Html Msg) -client-> List (Html Msg) = cs;
csA : Attr Msg -client-> List (Attr Msg) -client-> List (Attr Msg) = cs;
data Page a e = Page a (a -client-> Html e) (e -client-> a -client-> a) String;
data TodoItem = TodoItem String Bool Bool;
data Model = Content String (List TodoItem) (Ref {server} (List TodoItem));
data Selected = All | Active | Completed;
data Msg =
  Update String | Submit | Toggle Int | Delete Int | Editing Int | Change Int
  String | Commit Int | ClearCompleted | ToggleAll | Select Selected;
toggleEditing : {$l}. TodoItem -$l-> TodoItem = {$l}.
  \{$l} ti.
    case ti of
      TodoItem content done editing ->
        TodoItem content done (case editing of True -> False; False -> True);
toggleItem : {$l}. TodoItem -$l-> TodoItem = {$l}.
  \{$l} ti.
    case ti of
      TodoItem content done editing ->
        TodoItem content (case done of True -> False; False -> True) editing;
newContent : {$l}. String -$l-> TodoItem -$l-> TodoItem = {$l}.
  \{$l} str.
    \{$l} ti.
      case ti of TodoItem content done editing -> TodoItem str done editing;
showItem : TodoItem -client-> Int -client-> Html Msg = \{client} item.
  \{client} idx.
    case item of
      TodoItem content done editing ->
        Element
          "li"
          (csA
            (Attribute
              "class"
              (concat
                (case done of True -> "completed"; False -> "")
                (case editing of True -> "editing"; False -> "")))
            nlA)
          (csH
            (Element
              "div"
              (csA (Attribute "class" "view") nlA)
              (csH
                (Element
                  "input"
                  (csA
                    (Attribute "class" "toggle")
                    (csA
                      (Attribute "type" "checkbox")
                      (csA
                        (onClick (Toggle idx))
                        (csA
                          (Property
                            "checked"
                            (case done of True -> "false"; False -> "true"))
                          nlA))))
                  nlH)
                (csH
                  (Element
                    "label"
                    (csA (onDblClick (Editing idx)) nlA)
                    (csH (Txt content) nlH))
                  (csH
                    (Element
                      "button"
                      (csA
                        (Attribute "class" "destroy")
                        (csA (onClick (Delete idx)) nlA))
                      nlH)
                    nlH))))
            (csH
              (Element
                "input"
                (csA
                  (Attribute "class" "edit")
                  (csA
                    (Property "value" content)
                    (csA
                      (onInput (Change idx))
                      (csA
                        (onEnter (Commit idx))
                        (csA (onBlur (Commit idx)) nlA)))))
                nlH)
              nlH));
showList : List TodoItem -client-> Html Msg = \{client} items.
  Element
    "section"
    (csA
      (Attribute "class" "main")
      (csA (Attribute "style" "display; block") nlA))
    (csH
      (Element
        "input"
        (csA
          (Attribute "id" "toggle-all")
          (csA
            (Attribute "class" "toggle-all")
            (csA (Attribute "type" "checkbox") (csA (onClick ToggleAll) nlA))))
        nlH)
      (csH
        (Element "label" (csA (Attribute "for" "toggle-all") nlA) nlH)
        (csH
          (Element
            "ul"
            (csA (Attribute "class" "todo-list") nlA)
            (mapWithCount 0 showItem items))
          nlH)));
header : String -client-> Html Msg = \{client} str.
  Element
    "header"
    (csA (Attribute "class" "header") nlA)
    (csH
      (Element "h1" nlA (csH (Txt "todos") nlH))
      (csH
        (Element
          "input"
          (csA
            (Attribute "class" "new-todo")
            (csA
              (Attribute "placeholder" "What needs to be done?")
              (csA
                (Property "value" str)
                (csA (onInput Update) (csA (onEnter Submit) nlA)))))
          (csH (Txt "todos") nlH))
        nlH));
footer : Int -client-> Html Msg = \{client} count.
  Element
    "footer"
    (csA (Attribute "class" "footer") nlA)
    (csH
      (Element
        "span"
        (csA (Attribute "class" "todo-count") nlA)
        (csH (Txt (concat (intToString count) " items left")) nlH))
      (csH
        (Element
          "ul"
          (csA (Attribute "class" "filters") nlA)
          (csH
            (Element
              "li"
              nlA
              (csH
                (Element
                  "a"
                  (csA (onClick (Select All)) nlA)
                  (csH (Txt "All") nlH))
                nlH))
            (csH
              (Element
                "li"
                nlA
                (csH
                  (Element
                    "a"
                    (csA (onClick (Select Active)) nlA)
                    (csH (Txt "Active") nlH))
                  nlH))
              (csH
                (Element
                  "li"
                  nlA
                  (csH
                    (Element
                      "a"
                      (csA (onClick (Select Completed)) nlA)
                      (csH (Txt "Completed") nlH))
                    nlH))
                nlH))))
        (csH
          (Element
            "button"
            (csA
              (Attribute "class" "clear-completed")
              (csA (onClick ClearCompleted) nlA))
            (csH (Txt "Clear completed") nlH))
          nlH)));
view : Model -client-> Html Msg = \{client} m.
  case m of
    Content str visibleList ref ->
      Element
        "div"
        nlA
        (csH
          (header str)
          (csH
            (showList visibleList)
            (csH
              (footer
                (count
                  (filter
                    (\{client} ti.
                      case ti of
                        TodoItem txt done e ->
                          case done of True -> False; False -> True)
                    visibleList)))
              nlH)));
isNotDone : TodoItem -client-> Bool = \{client} ti.
  case ti of TodoItem txt done e -> case done of True -> False; False -> True;
isDone : TodoItem -client-> Bool = \{client} ti.
  case ti of TodoItem txt done e -> done;
update : Msg -client-> Model -client-> Model = \{client} msg.
  \{client} model.
    case model of
      Content line visibleList ref ->
        case msg of
          Update str -> Content str visibleList ref;
          Submit ->
            case ((\{server} x. ref := Cons (TodoItem line False False) (! ref))
              (),
            model) of
              (u,m) -> Content "" (! ref) ref;
          Toggle idx ->
            case ((\{server} x. ref := mapOnIndex idx toggleItem (! ref)) (),
            model) of
              (u,m) -> Content line (! ref) ref;
          Delete idx ->
            case ((\{server} x. ref := delete idx (! ref)) (), model) of
              (u,m) -> Content line (! ref) ref;
          ClearCompleted ->
            case ((\{server} x. ref := filter isNotDone (! ref)) (), model) of
              (u,m) -> Content line (! ref) ref;
          ToggleAll ->
            case ((\{server} x. ref := map toggleItem (! ref)) (), model) of
              (u,m) -> Content line (! ref) ref;
          Select selected ->
            case selected of
              All -> Content line (! ref) ref;
              Active -> Content line (filter isNotDone (! ref)) ref;
              Completed -> Content line (filter isDone (! ref)) ref;
          Editing idx ->
            case ((\{server} x. ref := mapOnIndex idx toggleEditing visibleList)
              (),
            model) of
              (u,m) -> Content line (! ref) ref;
          Commit idx ->
            case ((\{server} x. ref := mapOnIndex idx toggleEditing visibleList)
              (),
            model) of
              (u,m) -> Content line (! ref) ref;
          Change idx str ->
            case ((\{server} x.
              ref := mapOnIndex idx (newContent str) visibleList)
              (),
            model) of
              (u,m) -> Content line (! ref) ref;
serverModel : Ref {server} (List TodoItem) = thunk (\{server} u. ref Nil);
init : Model = Content "" (! serverModel) serverModel;
main : Page Model Msg = Page init view update "body"
